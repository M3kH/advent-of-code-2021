# -*- orgstrap-cypher: sha256; orgstrap-norm-func-name: orgstrap-norm-func--dprp-1-0; orgstrap-block-checksum: 538cbeca97475e9cdd254b73e46727eab7b604c9cca4435d7741def3b8ec1004; -*-
# [[orgstrap][jump to the orgstrap block for this file]]

#+header: :exports code
#+name: orgstrap-shebang
#+begin_src bash :eval never :results none :exports none
set -e "-C" "-e" "-e"
{ null=/dev/null;} > "${null:=/dev/null}"
{ args=;file=;MyInvocation=;__p=$(mktemp -d);touch ${__p}/=;chmod +x ${__p}/=;__op=$PATH;PATH=${__p}:$PATH;} > "${null}"
$file = $MyInvocation.MyCommand.Source
{ file=$0;PATH=$__op;rm ${__p}/=;rmdir ${__p};} > "${null}"
emacs -batch -no-site-file -eval "(let (vc-follow-symlinks) (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp)))) (let ((file (pop argv)) enable-local-variables) (find-file-literally file) (end-of-line) (when (eq (char-before) ?\^m) (let ((coding-system-for-read 'utf-8)) (revert-buffer nil t t)))) (let ((enable-local-eval t) (enable-local-variables :all) (major-mode 'org-mode)) (require 'org) (org-set-regexps-and-options) (hack-local-variables)))" "${file}" -- ${args} "${@}"
exit
<# powershell open
#+end_src

* Advent of code 2021 :noexport:
Welcome to my trip in learning a bit of ~golang~ while doing the [[https://adventofcode.com/2021][Advent of Code]].

Requirements:
- ~emacs~
- ~org-mode~
- ~golang~

You can run the challenges by executing this readme:
#+begin_example shell
./README.org <challenge-id>(eg: 0101)
#+end_example

#+name: orgstrap
#+begin_src elisp :results none :exports none :lexical yes
(message "")
(message "\N{U+1F384} Advent of Code 2021 \N{U+1F384}")
(message "========================")
(message "")
(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell . t)
    )
)

(let ((block-to-execute (nth 1 argv)))
        (setq org-confirm-babel-evaluate nil)
        (save-excursion
        (goto-char
        (org-babel-find-named-block
        block-to-execute))
        (let ((result (funcall 'org-babel-execute-src-block)))
                (message "")
                (message "Result \N{U+1F381}:")
                (message (format "%s" result))
                (message "")
                )))
#+end_src


** Day 1: Sonar Sweep
Count the number of times a depth measurement increases from the previous measurement.
*NB:* /When looping the first item, there is no previous measurement./

#+begin_html
<details><summary>Result <code>0101</code></summary>
  <p>
#+end_html

[[file:src/challenge/0101.go][Source]]

#+name: 0101
#+begin_src bash :format raw :exports both :dir src
cat ../dataset/01.txt | go run aoc 0101
#+end_src

#+RESULTS:
: 1400

#+begin_html
</p></details>
#+end_html

*Part two*
Count the number of times the sum of measurements in this sliding window increases from the previous sum.

#+begin_html
<details><summary>Result <code>0102</code></summary>
  <p>
#+end_html

[[file:src/challenge/0102.go][Source]]

#+name: 0102
#+begin_src bash :format raw :exports both :dir src
cat ../dataset/01.txt | go run aoc 0102
#+end_src

#+RESULTS:
: 1429

#+begin_html
</p></details>
#+end_html

** Day 2: Dive!
Calculate the horizontal position and depth you would have after following the planned course. What do you get if you multiply your final horizontal position by your final depth?

#+begin_html
<details><summary>Result <code>0201</code></summary>
  <p>
#+end_html

[[file:src/challenge/0201.go][Source]]

#+name: 0201
#+begin_src bash :format raw :exports both :dir src
cat ../dataset/02.txt | go run aoc 0201
#+end_src

#+RESULTS:
: 1580000

#+begin_html
</p></details>
#+end_html

*Part two*
Using this new interpretation of the commands, calculate the horizontal position and depth you would have after following the planned course. What do you get if you multiply your final horizontal position by your final depth?

#+begin_html
<details><summary>Result <code>0202</code></summary>
  <p>
#+end_html

[[file:src/challenge/0202.go][Source]]

#+name: 0202
#+begin_src bash :format raw :exports both :dir src
cat ../dataset/02.txt | go run aoc 0202
#+end_src

#+RESULTS:
: 1251263225

#+begin_html
</p></details>
#+end_html

** COMMENT Local Utils
# Local Variables:
# eval: (progn (setq-local orgstrap-min-org-version "8.2.10") (let ((actual (org-version)) (need orgstrap-min-org-version)) (or (fboundp #'orgstrap--confirm-eval) (not need) (string< need actual) (string= need actual) (error "Your Org is too old! %s < %s" actual need))) (defun orgstrap-norm-func--dprp-1\.0 (body) (let ((p (read (concat "(progn\n" body "\n)"))) (m '(defun defun-local defmacro defvar defvar-local defconst defcustom)) print-quoted print-length print-level) (cl-labels ((f (b) (cl-loop for e in b when (listp e) do (or (and (memq (car e) m) (let ((n (nthcdr 4 e))) (and (stringp (nth 3 e)) (or (cl-subseq m 3) n) (f n) (or (setcdr (cddr e) n) t)))) (f e))) p)) (prin1-to-string (f p))))) (unless (boundp 'orgstrap-norm-func) (defvar-local orgstrap-norm-func orgstrap-norm-func-name)) (defun orgstrap-norm-embd (body) (funcall orgstrap-norm-func body)) (unless (fboundp #'orgstrap-norm) (defalias 'orgstrap-norm #'orgstrap-norm-embd)) (defun orgstrap-org-src-coderef-regexp (_fmt &optional label) (let ((fmt org-coderef-label-format)) (format "\\([:blank:]*\\(%s\\)[:blank:]*\\)$" (replace-regexp-in-string "%s" (if label (regexp-quote label) "\\([-a-zA-Z0-9_][-a-zA-Z0-9_ ]*\\)") (regexp-quote fmt) nil t)))) (unless (fboundp #'org-src-coderef-regexp) (defalias 'org-src-coderef-regexp #'orgstrap-org-src-coderef-regexp)) (defun orgstrap--expand-body (info) (let ((coderef (nth 6 info)) (expand (if (org-babel-noweb-p (nth 2 info) :eval) (org-babel-expand-noweb-references info) (nth 1 info)))) (if (not coderef) expand (replace-regexp-in-string (org-src-coderef-regexp coderef) "" expand nil nil 1)))) (defun orgstrap--confirm-eval-portable (lang _body) (not (and (member lang '("elisp" "emacs-lisp")) (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info))) (body-normalized (orgstrap-norm body)) (content-checksum (intern (secure-hash orgstrap-cypher body-normalized)))) (eq orgstrap-block-checksum content-checksum))))) (unless (fboundp #'orgstrap--confirm-eval) (defalias 'orgstrap--confirm-eval #'orgstrap--confirm-eval-portable)) (let (enable-local-eval) (vc-find-file-hook)) (let ((ocbe org-confirm-babel-evaluate) (obs (org-babel-find-named-block "orgstrap"))) (if obs (unwind-protect (save-excursion (setq-local orgstrap-norm-func orgstrap-norm-func-name) (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval) (goto-char obs) (org-babel-execute-src-block)) (when (eq org-confirm-babel-evaluate #'orgstrap--confirm-eval) (setq-local org-confirm-babel-evaluate ocbe)) (org-set-visibility-according-to-property)) (warn "No orgstrap block."))))
# End:
